version: '3.8'

services:
  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  resource-management:
    build:
      context: ./Resourcemgmt
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    environment:
      - NODE_ENV=development
      - MONGODB_URI=mongodb://mongodb:27017/pdfDB
    networks:
      - microservices-network
    depends_on:
      mongodb:
        condition: service_healthy

  course-management:
    build:
      context: ./course_mgmt-main
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    environment:
      - NODE_ENV=development
      - MONGODB_URI=mongodb://mongodb:27017/
      - FLASK_APP=app.py
      - FLASK_ENV=development
    networks:
      - microservices-network
    depends_on:
      mongodb:
        condition: service_healthy

  assignment-submission:
    build:
      context: ./assignment_submission-main
      dockerfile: Dockerfile
    ports:
      - "8003:8003"
    environment:
      - NODE_ENV=development
      - MONGODB_URI=mongodb://mongodb:27017/
      - FLASK_APP=app.py
      - FLASK_ENV=development
    networks:
      - microservices-network
    depends_on:
      mongodb:
        condition: service_healthy

  gamified-app:
    build:
      context: ./gamified_app-main
      dockerfile: Dockerfile
    ports:
      - "8004:8004"
    environment:
      - NODE_ENV=development
      - MONGODB_URI=mongodb://mongodb:27017/
      - FLASK_APP=app.py
      - FLASK_ENV=development
    networks:
      - microservices-network
    depends_on:
      mongodb:
        condition: service_healthy

networks:
  microservices-network:
    driver: bridge

volumes:
  mongodb_data: 